from ipcbase import *

class IGuestLoginRequest(IPCService): # nn::account::baas::IGuestLoginRequest
	GetSessionId = stub(0).data(0xb9b8c02c, 0x43a9398c)
	GetAccountId = stub(12).data(0x33a3bc3b)
	GetLinkedNintendoAccountId = stub(13).data(0x30c833e7)
	GetNickname = stub(14)
	GetProfileImage = stub(15).data(0x81e2e563)
	LoadIdTokenCache = stub(21).data(0x763c12a2)

class IAsyncContext(IPCService): # nn::account::detail::IAsyncContext
	GetSystemEvent = stub(0).copyHandle(0x3b21560a)
	Cancel = stub(1)
	HasDone = stub(2).data(0xebf4acf4)
	GetResult = stub(3)

class INotifier(IPCService): # nn::account::detail::INotifier
	GetSystemEvent = stub(0).copyHandle(0x566029b8)

class ISessionObject(IPCService): # nn::account::detail::ISessionObject
	Dummy = stub(999)

class IOAuthProcedure(IPCService): # nn::account::http::IOAuthProcedure
	PrepareAsync = stub(0).moveHandle(IAsyncContext)
	GetRequest = stub(1)
	ApplyResponse = stub(2)
	ApplyResponseAsync = stub(3).moveHandle(IAsyncContext)
	Suspend = stub(10).data(0x5800e9d4, 0x6db7b9d8)

class IAuthorizationRequest(IPCService): # nn::account::nas::IAuthorizationRequest
	GetSessionId = stub(0).data(0xa5ed8cdf, 0xea6c4b3c)
	InvokeWithoutInteractionAsync = stub(10).moveHandle(IAsyncContext)
	IsAuthorized = stub(19).data(0x69f898f8)
	GetAuthorizationCode = stub(20).data(0x3ca98605)
	GetIdToken = stub(21).data(0xbada4ae9)
	GetState = stub(22)

class IOAuthProcedureForExternalNsa(IPCService): # nn::account::nas::IOAuthProcedureForExternalNsa
	PrepareAsync = stub(0).moveHandle(IAsyncContext)
	GetRequest = stub(1)
	ApplyResponse = stub(2)
	ApplyResponseAsync = stub(3).moveHandle(IAsyncContext)
	Suspend = stub(10).data(0x7f85945f, 0x4f5cbb9d)
	GetAccountId = stub(100).data(0xbbc64c94)
	GetLinkedNintendoAccountId = stub(101).data(0x2d140073)
	GetNickname = stub(102)
	GetProfileImage = stub(103).data(0x7bbc34dd)

class IOAuthProcedureForNintendoAccountLinkage(IPCService): # nn::account::nas::IOAuthProcedureForNintendoAccountLinkage
	PrepareAsync = stub(0).moveHandle(IAsyncContext)
	GetRequest = stub(1)
	ApplyResponse = stub(2)
	ApplyResponseAsync = stub(3).moveHandle(IAsyncContext)
	Suspend = stub(10).data(0x7e51649e, 0x2905e1f3)
	GetRequestWithTheme = stub(100)
	IsNetworkServiceAccountReplaced = stub(101).data(0xe120589a)
	GetUrlForIntroductionOfExtraMembership = stub(199)

class IProfile(IPCService): # nn::account::profile::IProfile
	Get = stub(0).data(0x80c80751, 0xf1a3c086, 0x0b4c7f80, 0xeef16126, 0xda836427, 0x0afacf0e, 0x73fbf6a1)
	GetBase = stub(1).data(0x1f202b49, 0xafe5feb2, 0x57f4ad4c, 0xbe158b14, 0x9b23f699, 0xb6cc9e02, 0x7d4d9395)
	GetImageSize = stub(10).data(0x96570e06)
	LoadImage = stub(11).data(0x85343533)

class IProfileEditor(IPCService): # nn::account::profile::IProfileEditor
	Get = stub(0).data(0x60655af5, 0x99a71d3a, 0x20238948, 0x70e3b529, 0x29c78c15, 0x82553355, 0xf534e68b)
	GetBase = stub(1).data(0x1511f376, 0x4a43309c, 0xf388ef25, 0xa925d28c, 0x5cc5bd27, 0x43535391, 0xd9765327)
	GetImageSize = stub(10).data(0xab23616d)
	LoadImage = stub(11).data(0xd604eb09)
	Store = stub(100)
	StoreWithImage = stub(101)

class IAppletAccessor(IPCService): # nn::am::service::IAppletAccessor
	GetAppletStateChangedEvent = stub(0).copyHandle(0x2463ace5)
	IsCompleted = stub(1).data(0x23b6e9e9)
	Start = stub(10)
	RequestExit = stub(20)
	Terminate = stub(25)
	GetResult = stub(30)

class IAudioController(IPCService): # nn::am::service::IAudioController
	SetExpectedMasterVolume = stub(0)
	GetMainAppletExpectedMasterVolume = stub(1).data(0x7a67e895)
	GetLibraryAppletExpectedMasterVolume = stub(2).data(0xa95df784)
	ChangeMainAppletMasterVolume = stub(3)
	SetTransparentVolumeRate = stub(4)

class IDisplayController(IPCService): # nn::am::service::IDisplayController
	GetLastForegroundCaptureImage = stub(0)
	UpdateLastForegroundCaptureImage = stub(1)
	GetLastApplicationCaptureImage = stub(2)
	GetCallerAppletCaptureImage = stub(3)
	UpdateCallerAppletCaptureImage = stub(4)
	GetLastForegroundCaptureImageEx = stub(5).data(0xefecacb5)
	GetLastApplicationCaptureImageEx = stub(6).data(0x6977efa4)
	GetCallerAppletCaptureImageEx = stub(7).data(0x358a0249)
	TakeScreenShotOfOwnLayer = stub(8)
	AcquireLastApplicationCaptureBuffer = stub(10).copyHandle(0xed2256ff)
	ReleaseLastApplicationCaptureBuffer = stub(11)
	AcquireLastForegroundCaptureBuffer = stub(12).copyHandle(0xe42eff81)
	ReleaseLastForegroundCaptureBuffer = stub(13)
	AcquireCallerAppletCaptureBuffer = stub(14).copyHandle(0x6585f932)
	ReleaseCallerAppletCaptureBuffer = stub(15)
	AcquireLastApplicationCaptureBufferEx = stub(16).data(0x3451c181).copyHandle(0x3451c182)
	AcquireLastForegroundCaptureBufferEx = stub(17).data(0xd71833fc).copyHandle(0xd71833fd)
	AcquireCallerAppletCaptureBufferEx = stub(18).data(0x02679195).copyHandle(0x02679196)
	ClearCaptureBuffer = stub(20)
	ClearAppletTransitionBuffer = stub(21)

class IGlobalStateController(IPCService): # nn::am::service::IGlobalStateController
	RequestToEnterSleep = stub(0)
	EnterSleep = stub(1)
	StartSleepSequence = stub(2)
	StartShutdownSequence = stub(3)
	StartRebootSequence = stub(4)
	LoadAndApplyIdlePolicySettings = stub(10)
	NotifyCecSettingsChanged = stub(11)
	SetDefaultHomeButtonLongPressTime = stub(12)
	UpdateDefaultDisplayResolution = stub(13)
	ShouldSleepOnBoot = stub(14).data(0xa00626c6)

class ILockAccessor(IPCService): # nn::am::service::ILockAccessor
	TryLock = stub(1).data(0x89850d8e).copyHandle(0x89850d8f)
	Unlock = stub(2)
	GetEvent = stub(3).copyHandle(0x534ad0f9)

class IOverlayFunctions(IPCService): # nn::am::service::IOverlayFunctions
	BeginToWatchShortHomeButtonMessage = stub(0)
	EndToWatchShortHomeButtonMessage = stub(1)
	GetApplicationIdForLogo = stub(2).data(0x8590f31d)
	SetGpuTimeSliceBoost = stub(3)
	SetAutoSleepTimeAndDimmingTimeEnabled = stub(4)
	TerminateApplicationAndSetReason = stub(5)
	SetScreenShotPermissionGlobally = stub(6)

class ISelfController(IPCService): # nn::am::service::ISelfController
	Exit = stub(0)
	LockExit = stub(1)
	UnlockExit = stub(2)
	EnterFatalSection = stub(3)
	LeaveFatalSection = stub(4)
	GetLibraryAppletLaunchableEvent = stub(9).copyHandle(0x396d31d0)
	SetScreenShotPermission = stub(10)
	SetOperationModeChangedNotification = stub(11)
	SetPerformanceModeChangedNotification = stub(12)
	SetFocusHandlingMode = stub(13)
	SetRestartMessageEnabled = stub(14)
	SetScreenShotAppletIdentityInfo = stub(15)
	SetOutOfFocusSuspendingEnabled = stub(16)
	SetControllerFirmwareUpdateSection = stub(17)
	SetRequiresCaptureButtonShortPressedMessage = stub(18)
	SetScreenShotImageOrientation = stub(19)
	CreateManagedDisplayLayer = stub(40).data(0xb35dd391)
	SetHandlesRequestToDisplay = stub(50)
	ApproveToDisplay = stub(51)
	OverrideAutoSleepTimeAndDimmingTime = stub(60)
	SetMediaPlaybackState = stub(61)
	SetIdleTimeDetectionExtension = stub(62)
	GetIdleTimeDetectionExtension = stub(63).data(0x0417f347)
	SetInputDetectionSourceSet = stub(64)
	ReportUserIsActive = stub(65)
	GetCurrentIlluminance = stub(66).data(0x4c7206dc)
	IsIlluminanceAvailable = stub(67).data(0xe41b8972)

class IStorageAccessor(IPCService): # nn::am::service::IStorageAccessor
	GetSize = stub(0).data(0xf9487c69)
	Write = stub(10)
	Read = stub(11)

class ITransferStorageAccessor(IPCService): # nn::am::service::ITransferStorageAccessor
	GetSize = stub(0).data(0xd55162c6)
	GetHandle = stub(1).data(0xaf3bafae).copyHandle(0xaf3bafaf)

class IWindow(IPCService): # nn::am::service::IWindow
	pass

class IWindowController(IPCService): # nn::am::service::IWindowController
	CreateWindow = stub(0).moveHandle(IWindow)
	GetAppletResourceUserId = stub(1).data(0x83fa7ad6)
	AcquireForegroundRights = stub(10)
	ReleaseForegroundRights = stub(11)
	RejectToChangeIntoBackground = stub(12)

@register('aoc:u')
class IAddOnContentManager(IPCService): # nn::aocsrv::detail::IAddOnContentManager
	CountAddOnContentByApplicationId = stub(0).data(0x9833c5f3)
	ListAddOnContentByApplicationId = stub(1).data(0xdc4c2044)
	CountAddOnContent = stub(2).data(0xb6e1efba)
	ListAddOnContent = stub(3).data(0xe4838b38)
	GetAddOnContentBaseIdByApplicationId = stub(4).data(0xfeaf0f6a)
	GetAddOnContentBaseId = stub(5).data(0xbd0b6804)
	PrepareAddOnContentByApplicationId = stub(6)
	PrepareAddOnContent = stub(7)

class ApmISession(IPCService): # nn::apm::ISession
	SetPerformanceConfiguration = stub(0)
	GetPerformanceConfiguration = stub(1).data(0x99c1183c)

@register('apm:sys')
class ISystemManager(IPCService): # nn::apm::ISystemManager
	RequestPerformanceMode = stub(0)
	GetPerformanceEvent = stub(1).copyHandle(0xc79be4d3)
	GetThrottlingState = stub(2).data(0x785d5e1a, 0x5d1b4be8, 0xc8139546, 0x385b97fc, 0x4a27248c)
	GetLastThrottlingState = stub(3).data(0x04ca6c16, 0x89fdb65f, 0x41394fea, 0xd82c90e1, 0x4ebe143c)
	ClearLastThrottlingState = stub(4)

class IDeliveryCacheDirectoryService(IPCService): # nn::bcat::detail::ipc::IDeliveryCacheDirectoryService
	Open = stub(0)
	Read = stub(1).data(0x3e003440)
	GetCount = stub(2).data(0x4a8900f1)

class IDeliveryCacheFileService(IPCService): # nn::bcat::detail::ipc::IDeliveryCacheFileService
	Open = stub(0)
	Read = stub(1).data(0xe52ba21d)
	GetSize = stub(2).data(0x77a85a37)
	GetDigest = stub(3).data(0x3050e059, 0x1cf9a15a)

class IDeliveryCacheProgressService(IPCService): # nn::bcat::detail::ipc::IDeliveryCacheProgressService
	GetEvent = stub(0).copyHandle(0x518aa609)
	GetImpl = stub(1)

class IDeliveryCacheStorageService(IPCService): # nn::bcat::detail::ipc::IDeliveryCacheStorageService
	CreateFileService = stub(0).moveHandle(IDeliveryCacheFileService)
	CreateDirectoryService = stub(1).moveHandle(IDeliveryCacheDirectoryService)
	EnumerateDeliveryCacheDirectory = stub(10).data(0xd5a2b62c)

@register('caps:su')
class IScreenShotApplicationService(IPCService): # nn::capsrv::sf::IScreenShotApplicationService
	SaveScreenShot = stub(201).data(0x8977e739, 0x3696c9da, 0xcffa689e, 0x4b08d97a)
	SaveScreenShotEx0 = stub(203).data(0xd823e8b8, 0xb763d5f8, 0xc985b2d2, 0x3a291f2c)

class IDebugger(IPCService): # nn::fgm::sf::IDebugger
	Initialize = stub(0).copyHandle(0x22fe2ddf)
	Read = stub(1).data(0xded15e6e, 0x1f6c56ae)
	Cancel = stub(2)

class SfIRequest(IPCService): # nn::fgm::sf::IRequest
	Initialize = stub(0).copyHandle(0x7cfc3061)
	Set = stub(1)
	Get = stub(2).data(0xbc7adc6c)
	Cancel = stub(3)

@register('fgm:0')
@register('fgm')
@register('fgm:9')
class SfISession(IPCService): # nn::fgm::sf::ISession
	Initialize = stub(0).moveHandle(SfIRequest)

class IFriendService(IPCService): # nn::friends::detail::ipc::IFriendService
	GetCompletionEvent = stub(0).copyHandle(0xf23ad67f)
	Cancel = stub(1)
	GetFriendListIds = stub(10100).data(0xb1af2b4e)
	GetFriendList = stub(10101).data(0xaa7887bf)
	UpdateFriendInfo = stub(10102)
	GetFriendProfileImage = stub(10110).data(0x3a2c9a52)
	SendFriendRequestForApplication = stub(10200)
	AddFacedFriendRequestForApplication = stub(10211)
	GetBlockedUserListIds = stub(10400).data(0x787c485a)
	GetProfileList = stub(10500)
	DeclareOpenOnlinePlaySession = stub(10600)
	DeclareCloseOnlinePlaySession = stub(10601)
	UpdateUserPresence = stub(10610)
	GetPlayHistoryRegistrationKey = stub(10700)
	GetPlayHistoryRegistrationKeyWithNetworkServiceAccountId = stub(10701)
	AddPlayHistory = stub(10702)
	GetProfileImageUrl = stub(11000).data(0x16c7116a, 0x60545159, 0x0a04ad11, 0x399d4597, 0x8c26e632, 0x3409bfcc, 0x80ab1475, 0x26f5becc, 0xe9a1ee6e, 0xd39bbb02, 0x4c15a4a3, 0x549b02b8, 0xc589c778, 0xd685c27b, 0xbee98532, 0x4321bd4f, 0x8ac34fe6, 0x40c11d6a, 0x88ceae48, 0x054815fd)
	GetFriendCount = stub(20100).data(0xe66436eb)
	GetNewlyFriendCount = stub(20101).data(0xb01b144d)
	GetFriendDetailedInfo = stub(20102)
	SyncFriendList = stub(20103)
	RequestSyncFriendList = stub(20104)
	LoadFriendSetting = stub(20110)
	GetReceivedFriendRequestCount = stub(20200).data(0x4f7480e3)
	GetFriendRequestList = stub(20201).data(0x967b91ab)
	GetFriendCandidateList = stub(20300).data(0xcd34860b)
	GetNintendoNetworkIdInfo = stub(20301).data(0x9f63e43d)
	GetBlockedUserList = stub(20400).data(0x4076f296)
	SyncBlockedUserList = stub(20401)
	GetProfileExtraList = stub(20500)
	GetRelationship = stub(20501).data(0xa8a00538)
	GetUserPresenceView = stub(20600)
	GetPlayHistoryList = stub(20700).data(0x65336469)
	GetPlayHistoryStatistics = stub(20701).data(0xf9abb3f5, 0xc455f161)
	LoadUserSetting = stub(20800)
	SyncUserSetting = stub(20801)
	RequestListSummaryOverlayNotification = stub(20900)
	GetExternalApplicationCatalog = stub(21000)
	DropFriendNewlyFlags = stub(30100)
	DeleteFriend = stub(30101)
	DropFriendNewlyFlag = stub(30110)
	ChangeFriendFavoriteFlag = stub(30120)
	ChangeFriendOnlineNotificationFlag = stub(30121)
	SendFriendRequest = stub(30200)
	SendFriendRequestWithApplicationInfo = stub(30201)
	CancelFriendRequest = stub(30202)
	AcceptFriendRequest = stub(30203)
	RejectFriendRequest = stub(30204)
	ReadFriendRequest = stub(30205)
	GetFacedFriendRequestRegistrationKey = stub(30210).data(0x562959da, 0xe9de59dc, 0xc6342256, 0x78367c48, 0x8598a758, 0xceaf028a, 0x11ee4578, 0x86303e7c)
	AddFacedFriendRequest = stub(30211)
	CancelFacedFriendRequest = stub(30212)
	GetFacedFriendRequestProfileImage = stub(30213).data(0xb8d8c4a7)
	GetFacedFriendRequestProfileImageFromPath = stub(30214).data(0x3066b068)
	SendFriendRequestWithExternalApplicationCatalogId = stub(30215)
	ResendFacedFriendRequest = stub(30216)
	SendFriendRequestWithNintendoNetworkIdInfo = stub(30217)
	BlockUser = stub(30400)
	BlockUserWithApplicationInfo = stub(30401)
	UnblockUser = stub(30402)
	GetProfileExtraFromFriendCode = stub(30500)
	DeletePlayHistory = stub(30700)
	ChangePresencePermission = stub(30810)
	ChangeFriendRequestReception = stub(30811)
	ChangePlayLogPermission = stub(30812)
	IssueFriendCode = stub(30820)
	ClearPlayLog = stub(30830)
	DeleteNetworkServiceAccountCache = stub(49900)

class INotificationService(IPCService): # nn::friends::detail::ipc::INotificationService
	GetEvent = stub(0).copyHandle(0x4018391c)
	Clear = stub(1)
	Pop = stub(2).data(0xa64f0308, 0x6409051d)

@register('friend:v')
@register('friend:u')
@register('friend:m')
@register('friend:s')
@register('friend:a')
class FriendsDetailIpcIServiceCreator(IPCService): # nn::friends::detail::ipc::IServiceCreator
	CreateFriendService = stub(0).moveHandle(IFriendService)
	CreateNotificationService = stub(1).moveHandle(INotificationService)

class IActiveVibrationDeviceList(IPCService): # nn::hid::IActiveVibrationDeviceList
	ActivateVibrationDevice = stub(0)

class IAppletResource(IPCService): # nn::hid::IAppletResource
	GetSharedMemoryHandle = stub(0).copyHandle(0xbb1ca0fe)

@register('hid:dbg')
class IHidDebugServer(IPCService): # nn::hid::IHidDebugServer
	DeactivateDebugPad = stub(0)
	SetDebugPadAutoPilotState = stub(1)
	UnsetDebugPadAutoPilotState = stub(2)
	DeactivateTouchScreen = stub(10)
	SetTouchScreenAutoPilotState = stub(11)
	UnsetTouchScreenAutoPilotState = stub(12)
	DeactivateMouse = stub(20)
	SetMouseAutoPilotState = stub(21)
	UnsetMouseAutoPilotState = stub(22)
	DeactivateKeyboard = stub(30)
	SetKeyboardAutoPilotState = stub(31)
	UnsetKeyboardAutoPilotState = stub(32)
	DeactivateXpad = stub(50)
	SetXpadAutoPilotState = stub(51)
	UnsetXpadAutoPilotState = stub(52)
	DeactivateJoyXpad = stub(60)
	DeactivateGesture = stub(91)
	DeactivateHomeButton = stub(110)
	SetHomeButtonAutoPilotState = stub(111)
	UnsetHomeButtonAutoPilotState = stub(112)
	DeactivateSleepButton = stub(120)
	SetSleepButtonAutoPilotState = stub(121)
	UnsetSleepButtonAutoPilotState = stub(122)
	DeactivateInputDetector = stub(123)
	DeactivateCaptureButton = stub(130)
	SetCaptureButtonAutoPilotState = stub(131)
	UnsetCaptureButtonAutoPilotState = stub(132)
	SetShiftAccelerometerCalibrationValue = stub(133)
	GetShiftAccelerometerCalibrationValue = stub(134).data(0x48861b37)
	SetShiftGyroscopeCalibrationValue = stub(135)
	GetShiftGyroscopeCalibrationValue = stub(136).data(0x741c10d5)
	DeactivateConsoleSixAxisSensor = stub(140)
	ActivateFirmwareUpdate = stub(201)
	DeactivateFirmwareUpdate = stub(202)
	StartFirmwareUpdate = stub(203)
	GetFirmwareUpdateStage = stub(204).data(0x11f50579, 0x8410dbf1)
	GetFirmwareVersion = stub(205).data(0x3c97188e, 0x05e7567c)
	GetDestinationFirmwareVersion = stub(206).data(0x90745c15, 0x5a0f5aa6)
	DiscardFirmwareInfoCacheForRevert = stub(207)
	StartFirmwareUpdateForRevert = stub(208)
	GetAvailableFirmwareVersionForRevert = stub(209).data(0xfee8dfd9, 0x15517ea0)
	UpdateControllerColor = stub(221)

@register('hid')
class IHidServer(IPCService): # nn::hid::IHidServer
	CreateAppletResource = stub(0).moveHandle(IAppletResource)
	ActivateDebugPad = stub(1)
	ActivateTouchScreen = stub(11)
	ActivateMouse = stub(21)
	ActivateKeyboard = stub(31)
	AcquireXpadIdEventHandle = stub(40).copyHandle(0x74f6fde8)
	ReleaseXpadIdEventHandle = stub(41)
	ActivateXpad = stub(51)
	GetXpadIds = stub(55).data(0x1a0fdf3e)
	ActivateJoyXpad = stub(56)
	GetJoyXpadLifoHandle = stub(58).copyHandle(0x99408e1d)
	GetJoyXpadIds = stub(59).data(0xa72180e7)
	ActivateSixAxisSensor = stub(60)
	DeactivateSixAxisSensor = stub(61)
	GetSixAxisSensorLifoHandle = stub(62).copyHandle(0xc19f7e11)
	ActivateJoySixAxisSensor = stub(63)
	DeactivateJoySixAxisSensor = stub(64)
	GetJoySixAxisSensorLifoHandle = stub(65).copyHandle(0x792bd141)
	StartSixAxisSensor = stub(66)
	StopSixAxisSensor = stub(67)
	IsSixAxisSensorFusionEnabled = stub(68).data(0xb1a5b34d)
	EnableSixAxisSensorFusion = stub(69)
	SetSixAxisSensorFusionParameters = stub(70)
	GetSixAxisSensorFusionParameters = stub(71).data(0xf5ffa4bc)
	ResetSixAxisSensorFusionParameters = stub(72)
	SetAccelerometerParameters = stub(73)
	GetAccelerometerParameters = stub(74).data(0xd089fa81)
	ResetAccelerometerParameters = stub(75)
	SetAccelerometerPlayMode = stub(76)
	GetAccelerometerPlayMode = stub(77).data(0x70bbd773)
	ResetAccelerometerPlayMode = stub(78)
	SetGyroscopeZeroDriftMode = stub(79)
	GetGyroscopeZeroDriftMode = stub(80).data(0x49b51f53)
	ResetGyroscopeZeroDriftMode = stub(81)
	IsSixAxisSensorAtRest = stub(82).data(0x2d1cfbde)
	ActivateGesture = stub(91)
	SetSupportedNpadStyleSet = stub(100)
	GetSupportedNpadStyleSet = stub(101).data(0x24e14829)
	SetSupportedNpadIdType = stub(102)
	ActivateNpad = stub(103)
	DeactivateNpad = stub(104)
	AcquireNpadStyleSetUpdateEventHandle = stub(106).copyHandle(0x55e833aa)
	DisconnectNpad = stub(107)
	GetPlayerLedPattern = stub(108).data(0x969ea60a)
	SetNpadJoyHoldType = stub(120)
	GetNpadJoyHoldType = stub(121).data(0x8ce6115c)
	SetNpadJoyAssignmentModeSingleByDefault = stub(122)
	SetNpadJoyAssignmentModeSingle = stub(123)
	SetNpadJoyAssignmentModeDual = stub(124)
	MergeSingleJoyAsDualJoy = stub(125)
	StartLrAssignmentMode = stub(126)
	StopLrAssignmentMode = stub(127)
	SetNpadHandheldActivationMode = stub(128)
	GetNpadHandheldActivationMode = stub(129).data(0x10755f9c)
	SwapNpadAssignment = stub(130)
	IsUnintendedHomeButtonInputProtectionEnabled = stub(131).data(0x8b026d5d)
	EnableUnintendedHomeButtonInputProtection = stub(132)
	GetVibrationDeviceInfo = stub(200).data(0x91c15b81)
	SendVibrationValue = stub(201)
	GetActualVibrationValue = stub(202).data(0x877d5af8, 0x51e13a7e)
	CreateActiveVibrationDeviceList = stub(203).moveHandle(IActiveVibrationDeviceList)
	PermitVibration = stub(204)
	IsVibrationPermitted = stub(205).data(0xa1a6ccaa)
	SendVibrationValues = stub(206)
	ActivateConsoleSixAxisSensor = stub(300)
	StartConsoleSixAxisSensor = stub(301)
	StopConsoleSixAxisSensor = stub(302)
	IsUsbFullKeyControllerEnabled = stub(400).data(0x6f8c7f41)
	EnableUsbFullKeyController = stub(401)
	IsUsbFullKeyControllerConnected = stub(402).data(0xb4fd8e4e)
	SetNpadCommunicationMode = stub(1000)
	GetNpadCommunicationMode = stub(1001).data(0x67278b9b)

@register('hid:sys')
class IHidSystemServer(IPCService): # nn::hid::IHidSystemServer
	SendKeyboardLockKeyEvent = stub(31)
	AcquireHomeButtonEventHandle = stub(101).copyHandle(0xfae46002)
	ActivateHomeButton = stub(111)
	AcquireSleepButtonEventHandle = stub(121).copyHandle(0x8b9d4db9)
	ActivateSleepButton = stub(131)
	AcquireCaptureButtonEventHandle = stub(141).copyHandle(0x7e7ee498)
	ActivateCaptureButton = stub(151)
	AcquireNfcDeviceUpdateEventHandle = stub(210).copyHandle(0x2779b2b2)
	GetNpadsWithNfc = stub(211).data(0x9cbb2adb)
	AcquireNfcActivateEventHandle = stub(212).copyHandle(0x54ad7fc9)
	ActivateNfc = stub(213)
	AcquireIrSensorEventHandle = stub(230).copyHandle(0xaf5c1965)
	ActivateIrSensor = stub(231)
	ActivateNpadSystem = stub(301)
	ApplyNpadSystemCommonPolicy = stub(303)
	EnableAssigningSingleOnSlSrPress = stub(304)
	DisableAssigningSingleOnSlSrPress = stub(305)
	GetLastActiveNpad = stub(306).data(0xb8b04f72)
	GetNpadSystemExtStyle = stub(307).data(0x9ee5ab27, 0xb0dc2bdd)
	SetNpadPlayerLedBlinkingDevice = stub(311)
	GetUniquePadsFromNpad = stub(321).data(0x3fe4e26a)
	GetIrSensorState = stub(322).data(0xa8b21c12)
	GetXcdHandleForNpadWithIrSensor = stub(323).data(0x38ac421a)
	SetAppletResourceUserId = stub(500)
	RegisterAppletResourceUserId = stub(501)
	UnregisterAppletResourceUserId = stub(502)
	EnableAppletToGetInput = stub(503)
	SetAruidValidForVibration = stub(504)
	EnableAppletToGetSixAxisSensor = stub(505)
	SetVibrationMasterVolume = stub(510)
	GetVibrationMasterVolume = stub(511).data(0x20ff74d5)
	BeginPermitVibrationSession = stub(512)
	EndPermitVibrationSession = stub(513)
	EnableHandheldHids = stub(520)
	DisableHandheldHids = stub(521)
	AcquirePlayReportControllerUsageUpdateEvent = stub(540).copyHandle(0x0e789da5)
	GetPlayReportControllerUsages = stub(541).data(0x0ecac100)
	AcquirePlayReportRegisteredDeviceUpdateEvent = stub(542).copyHandle(0x983fa917)
	GetRegisteredDevices = stub(543).data(0xf76cbfd0)
	AcquireConnectionTriggerTimeoutEvent = stub(544).copyHandle(0xea3ab82e)
	SendConnectionTrigger = stub(545)
	AcquireDeviceRegisteredEventForControllerSupport = stub(546).copyHandle(0x6c834efc)
	GetAllowedBluetoothLinksCount = stub(547).data(0xde11d509)
	ActivateUniquePad = stub(700)
	AcquireUniquePadConnectionEventHandle = stub(702).copyHandle(0xfd30e112)
	GetUniquePadIds = stub(703).data(0x01472817)
	AcquireJoyDetachOnBluetoothOffEventHandle = stub(751).copyHandle(0xbeb682b5)
	ListSixAxisSensorHandles = stub(800).data(0x201e60af)
	IsSixAxisSensorUserCalibrationSupported = stub(801).data(0x240373f9)
	ResetSixAxisSensorCalibrationValues = stub(802)
	StartSixAxisSensorUserCalibration = stub(803)
	CancelSixAxisSensorUserCalibration = stub(804)
	GetUniquePadBluetoothAddress = stub(805).data(0x38df6b01)
	DisconnectUniquePad = stub(806)
	StartAnalogStickManualCalibration = stub(821)
	RetryCurrentAnalogStickManualCalibrationStage = stub(822)
	CancelAnalogStickManualCalibration = stub(823)
	ResetAnalogStickManualCalibration = stub(824)
	IsUsbFullKeyControllerEnabled = stub(850).data(0x286d7d09)
	EnableUsbFullKeyController = stub(851)
	IsUsbConnected = stub(852).data(0x64f4aa62)
	ActivateInputDetector = stub(900)
	NotifyInputDetector = stub(901)
	InitializeFirmwareUpdate = stub(1000)
	GetFirmwareVersion = stub(1001).data(0x316e13a4, 0x086e8bbe)
	GetAvailableFirmwareVersion = stub(1002).data(0xf9b20471, 0xc65baf2d)
	IsFirmwareUpdateAvailable = stub(1003).data(0xb9a18ef8)
	CheckFirmwareUpdateRequired = stub(1004).data(0xea728e23)
	StartFirmwareUpdate = stub(1005).data(0xef97f31e)
	AbortFirmwareUpdate = stub(1006)
	GetFirmwareUpdateState = stub(1007).data(0x465a322d)

@register('hid:tmp')
class IHidTemporaryServer(IPCService): # nn::hid::IHidTemporaryServer
	GetConsoleSixAxisSensorCalibrationValues = stub(0).data(0x9517284f, 0xe50f4ddc, 0x8a7ba77f)

@register('irs')
class IIrSensorServer(IPCService): # nn::irsensor::IIrSensorServer
	ActivateIrsensor = stub(302)
	DeactivateIrsensor = stub(303)
	GetIrsensorSharedMemoryHandle = stub(304).copyHandle(0x33dcd5f5)
	StopImageProcessor = stub(305)
	RunMomentProcessor = stub(306)
	RunClusteringProcessor = stub(307)
	RunImageTransferProcessor = stub(308)
	GetImageTransferProcessorState = stub(309).data(0x5cce6837, 0xc20bcdd4)
	RunTeraPluginProcessor = stub(310)
	GetNpadIrCameraHandle = stub(311).data(0x5cd07eb3)
	RunDpdProcessor = stub(312)
	SuspendImageProcessor = stub(313)
	CheckFirmwareVersion = stub(314)

@register('irs:sys')
class IIrSensorSystemServer(IPCService): # nn::irsensor::IIrSensorSystemServer
	SetAppletResourceUserId = stub(500)
	RegisterAppletResourceUserId = stub(501)
	UnregisterAppletResourceUserId = stub(502)
	EnableAppletToGetInput = stub(503)

class IDatabaseService(IPCService): # nn::mii::detail::IDatabaseService
	IsUpdated = stub(0).data(0x4f5cb542)
	IsFullDatabase = stub(1).data(0x5dd769f0)
	GetCount = stub(2).data(0x70c8632f)
	Get = stub(3).data(0x8174ac08)
	Get1 = stub(4).data(0xf47e1378)
	UpdateLatest = stub(5).data(0x4b036da2, 0x1eaf6cfb, 0xfe4ce8db, 0x6a42ca82, 0xfb6c911b, 0x911f90f4, 0x9b1b77bf, 0x72a6ea85, 0x2180a306, 0x7974ff2b, 0x3fb4c59c)
	BuildRandom = stub(6).data(0x6bb3259f, 0x2a446a31, 0xbf745d8f, 0xfd9a549a, 0x143c73f1, 0x49f3f5b2, 0x644334fd, 0x750f9536, 0x1af2af4b, 0x708dc2a9, 0x04cda03d)
	BuildDefault = stub(7).data(0x8fcf9178, 0x9a723314, 0xe97bd8f0, 0xaad7f55d, 0xf36a52c6, 0xd905c94c, 0x845cd257, 0x9c0cb602, 0xf0024684, 0x1d2458b4, 0x45f0a2e6)
	Get2 = stub(8).data(0x04a01c7e)
	Get3 = stub(9).data(0x0f76715d)
	UpdateLatest1 = stub(10).data(0x3fb4c59d, 0x6ccde302, 0x603b0d30, 0x84a38b80, 0x784367e2, 0xbab7e3a0, 0xec5505ab, 0xa7c88629, 0x25083ecd)
	FindIndex = stub(11).data(0x25b6628e)
	Move = stub(12)
	AddOrReplace = stub(13)
	Delete = stub(14)
	DestroyFile = stub(15)
	DeleteFile = stub(16)
	Format = stub(17)
	Import = stub(18)
	Export = stub(19)
	IsBrokenDatabaseWithClearFlag = stub(20).data(0xcf41f6f6)
	GetIndex = stub(21).data(0x94ca35d7)

@register('mii:e')
@register('mii:u')
class MiiDetailIStaticService(IPCService): # nn::mii::detail::IStaticService
	GetDatabaseService = stub(0).moveHandle(IDatabaseService)

class INetworkProfile(IPCService): # nn::nifm::detail::INetworkProfile
	Update = stub(0).data(0x329445c1, 0xb1fe6214)
	PersistOld = stub(1).data(0xa7f09547, 0xaea785c3)
	Persist = stub(2).data(0x90af7b6d, 0x50ebebce)

class DetailIRequest(IPCService): # nn::nifm::detail::IRequest
	GetRequestState = stub(0).data(0x1e9ee33f)
	GetResult = stub(1)
	GetSystemEventReadableHandles = stub(2).copyHandle(0x41e15bed).copyHandle(0xc4cb81eb)
	Cancel = stub(3)
	Submit = stub(4)
	SetRequirement = stub(5)
	SetRequirementPreset = stub(6)
	SetPriority = stub(8)
	SetNetworkProfileId = stub(9)
	SetRejectable = stub(10)
	SetConnectionConfirmationOption = stub(11)
	SetPersistent = stub(12)
	SetInstant = stub(13)
	SetSustainable = stub(14)
	SetRawPriority = stub(15)
	SetGreedy = stub(16)
	SetSharable = stub(17)
	SetRequirementByRevision = stub(18)
	GetRequirement = stub(19).data(0x0f92507e, 0x3b9f9bbb, 0x04da3f10, 0x3c184435, 0x68ed30a2)
	GetRevision = stub(20).data(0x4332c552)
	GetAppletInfo = stub(21).data(0x043ff7b8, 0xb99fade1)
	GetAdditionalInfo = stub(22).data(0xb6f235a5)
	SetKeptInSleep = stub(23)
	RegisterSocketDescriptor = stub(24)
	UnregisterSocketDescriptor = stub(25)

class IScanRequest(IPCService): # nn::nifm::detail::IScanRequest
	Submit = stub(0)
	IsProcessing = stub(1).data(0x5f88dbac)
	GetResult = stub(2)
	GetSystemEventReadableHandle = stub(3).copyHandle(0x38bae1b0)

class IParentalControlService(IPCService): # nn::pctl::detail::ipc::IParentalControlService
	CheckFreeCommunicationPermission = stub(1001)
	ConfirmLaunchApplicationPermission = stub(1002)
	ConfirmResumeApplicationPermission = stub(1003)
	ConfirmSnsPostPermission = stub(1004)
	ConfirmSystemSettingsPermission = stub(1005)
	IsRestrictionTemporaryUnlocked = stub(1006).data(0x8222f00f)
	RevertRestrictionTemporaryUnlocked = stub(1007)
	EnterRestrictedSystemSettings = stub(1008)
	LeaveRestrictedSystemSettings = stub(1009)
	IsRestrictedSystemSettingsEntered = stub(1010).data(0xef8cad84)
	RevertRestrictedSystemSettingsEntered = stub(1011)
	GetRestrictedFeatures = stub(1012).data(0x13bc1b69)
	IsRestrictionEnabled = stub(1031).data(0x19739537)
	GetSafetyLevel = stub(1032).data(0x1c53f170)
	SetSafetyLevel = stub(1033)
	GetSafetyLevelSettings = stub(1034).data(0x8eb5e9fc)
	GetCurrentSettings = stub(1035).data(0x76c99305)
	SetCustomSafetyLevelSettings = stub(1036)
	GetDefaultRatingOrganization = stub(1037).data(0xc2d6ca74)
	SetDefaultRatingOrganization = stub(1038)
	GetFreeCommunicationApplicationListCount = stub(1039).data(0x289db2a0)
	AddToFreeCommunicationApplicationList = stub(1042)
	DeleteSettings = stub(1043)
	GetFreeCommunicationApplicationList = stub(1044).data(0x45ee34d0)
	UpdateFreeCommunicationApplicationList = stub(1045)
	DisableFeaturesForReset = stub(1046)
	NotifyApplicationDownloadStarted = stub(1047)
	UnlockRestrictionTemporarily = stub(1201)
	UnlockSystemSettingsRestriction = stub(1202)
	SetPinCode = stub(1203)
	GenerateInquiryCode = stub(1204).data(0x055690ba, 0x7b758b2c, 0x34b477df, 0x705c74ab)
	CheckMasterKey = stub(1205).data(0x3c527f6e)
	GetPinCodeLength = stub(1206).data(0xfea5b513)
	GetPinCodeChangedEvent = stub(1207).copyHandle(0xa6569d94)
	IsPairingActive = stub(1403).data(0x7553d9e6)
	GetSettingsLastUpdated = stub(1406).data(0x7aeceb0a)
	GetPairingAccountInfo = stub(1411).data(0x5b2d6974, 0x88368595)
	GetAccountNickname = stub(1421).data(0x83f21b88)
	GetAccountState = stub(1424).data(0x1ad3d974)
	GetSynchronizationEvent = stub(1432).copyHandle(0xf4fdc3e6)
	StartPlayTimer = stub(1451)
	StopPlayTimer = stub(1452)
	IsPlayTimerEnabled = stub(1453).data(0x28af89b6)
	GetPlayTimerRemainingTime = stub(1454).data(0x0799174c)
	IsRestrictedByPlayTimer = stub(1455).data(0xf19ab034)
	GetPlayTimerSettings = stub(1456).data(0x56cf62ee, 0xe67af8aa, 0x0659c925, 0xdf295380, 0x87c8cddc, 0x985a5ba9, 0xd9c8e292)
	GetPlayTimerEventToRequestSuspension = stub(1457).copyHandle(0x8cfe5746)
	NotifyWrongPinCodeInputManyTimes = stub(1471)
	CancelNetworkRequest = stub(1472)
	GetUnlinkedEvent = stub(1473).copyHandle(0x45d42153)
	ClearUnlinkedEvent = stub(1474)
	DisableAllFeatures = stub(1601).data(0x98d683ce)
	PostEnableAllFeatures = stub(1602).data(0x4948abe1)
	IsAllFeaturesDisabled = stub(1603).data(0x64ae5311)
	DeleteFromFreeCommunicationApplicationListForDebug = stub(1901)
	ClearFreeCommunicationApplicationListForDebug = stub(1902)
	DeletePairing = stub(1941)
	SetPlayTimerSettingsForDebug = stub(1951)
	GetPlayTimerSpentTimeForTest = stub(1952).data(0x06b4442c)
	RequestPairingAsync = stub(2001).data(0xb3aca566).copyHandle(0xb3aca567)
	FinishRequestPairing = stub(2002).data(0xbb37e20e, 0xc03342ea)
	AuthorizePairingAsync = stub(2003).data(0x15973404).copyHandle(0x15973405)
	FinishAuthorizePairing = stub(2004).data(0x07aa13c1, 0x9e1356c2)
	RetrievePairingInfoAsync = stub(2005).data(0x82980cb1).copyHandle(0x82980cb2)
	FinishRetrievePairingInfo = stub(2006).data(0x7df5a049, 0xddf93e28)
	UnlinkPairingAsync = stub(2007).data(0x446bfdab).copyHandle(0x446bfdac)
	FinishUnlinkPairing = stub(2008)
	GetAccountMiiImageAsync = stub(2009).data(0x5d6aeff9, 0x60e474d5).copyHandle(0x5d6aeffa)
	FinishGetAccountMiiImage = stub(2010).data(0x8a8f5cb0)
	GetAccountMiiImageContentTypeAsync = stub(2011).data(0x460d7f72, 0xaf4af774).copyHandle(0x460d7f73)
	FinishGetAccountMiiImageContentType = stub(2012).data(0xfef9cd89)
	SynchronizeParentalControlSettingsAsync = stub(2013).data(0x2c7f797b).copyHandle(0x2c7f797c)
	FinishSynchronizeParentalControlSettings = stub(2014)
	FinishSynchronizeParentalControlSettingsWithLastUpdated = stub(2015).data(0xf98a917c)

@register('pctl:s')
@register('pctl:r')
@register('pctl:a')
@register('pctl')
class IParentalControlServiceFactory(IPCService): # nn::pctl::detail::ipc::IParentalControlServiceFactory
	CreateService = stub(0).moveHandle(IParentalControlService)

@register('pcv:arb')
class IArbitrationManager(IPCService): # nn::pcv::IArbitrationManager
	ReleaseControl = stub(0)

@register('pcv:imm')
class IImmediateManager(IPCService): # nn::pcv::IImmediateManager
	SetClockRate = stub(0)

@register('pcv')
class IPcvService(IPCService): # nn::pcv::detail::IPcvService
	SetPowerEnabled = stub(0)
	SetClockEnabled = stub(1)
	SetClockRate = stub(2)
	GetClockRate = stub(3).data(0xc4a7ef9b)
	GetState = stub(4).data(0xd8f04be6, 0x29b4491f)
	GetPossibleClockRates = stub(5).data(0x83915556)
	SetMinVClockRate = stub(6)
	SetReset = stub(7)
	SetVoltageEnabled = stub(8)
	GetVoltageEnabled = stub(9).data(0xeedaf8eb)
	GetVoltageRange = stub(10).data(0x1c589c39, 0x0b585d63)
	SetVoltageValue = stub(11)
	GetVoltageValue = stub(12).data(0x261436ae)
	GetTemperatureThresholds = stub(13).data(0xe07520ca)
	SetTemperature = stub(14)
	Initialize = stub(15)
	IsInitialized = stub(16).data(0x4fe7274e)
	Finalize = stub(17)
	PowerOn = stub(18)
	PowerOff = stub(19)
	ChangeVoltage = stub(20)
	GetPowerClockInfoEvent = stub(21).copyHandle(0xc688dd72)
	GetOscillatorClock = stub(22).data(0x4b245cd9)
	GetDvfsTable = stub(23).data(0x6034993f)
	GetModuleStateTable = stub(24).data(0xd8ac1d75)
	GetPowerDomainStateTable = stub(25).data(0x3584f653)
	GetFuseInfo = stub(26).data(0x89aae7f7)

@register('prepo:a')
@register('prepo:m')
@register('prepo:u')
@register('prepo:s')
class IPrepoService(IPCService): # nn::prepo::detail::ipc::IPrepoService
	SaveReport = stub(10100)
	SaveReportWithUser = stub(10101)
	RequestImmediateTransmission = stub(10200)
	GetTransmissionStatus = stub(10300).data(0x9bf77bef)
	SaveSystemReport = stub(20100)
	SaveSystemReportWithUser = stub(20101)
	ClearStorage = stub(30100)
	IsUserAgreementCheckEnabled = stub(40100).data(0x70048e7a)
	SetUserAgreementCheckEnabled = stub(40101)
	GetStorageUsage = stub(90100).data(0xeee36e98, 0x24075c80)

@register('set:cal')
class IFactorySettingsServer(IPCService): # nn::settings::IFactorySettingsServer
	GetBluetoothBdAddress = stub(0).data(0x1bf38cc3)
	GetConfigurationId1 = stub(1).data(0x955fec02, 0x38dca153, 0x65518dd4, 0x40a84e07)
	GetAccelerometerOffset = stub(2).data(0x3119f6ee)
	GetAccelerometerScale = stub(3).data(0x35b773d9)
	GetGyroscopeOffset = stub(4).data(0x5868d3a6)
	GetGyroscopeScale = stub(5).data(0xe3c8f1e1)
	GetWirelessLanMacAddress = stub(6).data(0x99cc5d5d)
	GetWirelessLanCountryCodeCount = stub(7).data(0xcb7ce59d)
	GetWirelessLanCountryCodes = stub(8).data(0x55d047c7)
	GetSerialNumber = stub(9).data(0x34451728, 0x5820a80f, 0xf3a95f4e)
	SetInitialSystemAppletProgramId = stub(10)
	SetOverlayDispProgramId = stub(11)
	GetBatteryLot = stub(12).data(0x66dd853b, 0xc025dafb, 0x116d1848)
	GetEciDeviceCertificate = stub(14)
	GetEticketDeviceCertificate = stub(15)
	GetSslKey = stub(16)
	GetSslCertificate = stub(17)
	GetGameCardKey = stub(18)
	GetGameCardCertificate = stub(19)
	GetEciDeviceKey = stub(20).data(0x544993a6, 0xfbb6864b, 0xb9df3e09, 0xc44a1930, 0xbe2ada48, 0x61bac15d, 0x74c247c9, 0x451c4119, 0xb056dfcf, 0xe3153b5a, 0x2ed75b0f)
	GetEticketDeviceKey = stub(21)
	GetSpeakerParameter = stub(22).data(0x163b24f5, 0xb5dbbec6, 0xd1ffcefa, 0x43764797, 0x6035a825, 0x6ca6af27, 0xbcc60486, 0x5d42e089, 0x6686a92d, 0x153fc2df, 0x561d5e9c, 0xea5055e2)

class ISettingsItemKeyIterator(IPCService): # nn::settings::ISettingsItemKeyIterator
	GoNext = stub(0)
	GetKeySize = stub(1).data(0xe585f837)
	GetKey = stub(2).data(0xa6259171)

@register('set')
class ISettingsServer(IPCService): # nn::settings::ISettingsServer
	GetLanguageCode = stub(0).data(0x79f928a4)
	GetAvailableLanguageCodes = stub(1).data(0xcf76eb27)
	GetAvailableLanguageCodeCount = stub(3).data(0x9e4eae51)
	GetRegionCode = stub(4).data(0x82cadaa0)

@register('set:sys')
class ISystemSettingsServer(IPCService): # nn::settings::ISystemSettingsServer
	SetLanguageCode = stub(0)
	SetNetworkSettings = stub(1)
	GetNetworkSettings = stub(2).data(0x95b19b7e)
	GetFirmwareVersion = stub(3)
	GetFirmwareVersion2 = stub(4)
	GetLockScreenFlag = stub(7).data(0xed9cf657)
	SetLockScreenFlag = stub(8)
	GetBacklightSettings = stub(9).data(0x701bd553, 0xb3abe16b, 0xb8489f96, 0x9981b7c7, 0xce9510a5)
	SetBacklightSettings = stub(10)
	SetBluetoothDevicesSettings = stub(11)
	GetBluetoothDevicesSettings = stub(12).data(0xce55014b)
	GetExternalSteadyClockSourceId = stub(13).data(0x19f17b91, 0x30ef49d3)
	SetExternalSteadyClockSourceId = stub(14)
	GetUserSystemClockContext = stub(15).data(0xe7d09671, 0x1b534bec, 0x625976fc, 0x32d07c02)
	SetUserSystemClockContext = stub(16)
	GetAccountSettings = stub(17).data(0x75672482)
	SetAccountSettings = stub(18)
	GetAudioVolume = stub(19).data(0x37d568ea)
	SetAudioVolume = stub(20)
	GetEulaVersions = stub(21).data(0x549ef4f5)
	SetEulaVersions = stub(22)
	GetColorSetId = stub(23).data(0x829210e4)
	SetColorSetId = stub(24)
	GetConsoleInformationUploadFlag = stub(25).data(0xa48c0ded)
	SetConsoleInformationUploadFlag = stub(26)
	GetAutomaticApplicationDownloadFlag = stub(27).data(0xfafcd0c2)
	SetAutomaticApplicationDownloadFlag = stub(28)
	GetNotificationSettings = stub(29).data(0x804aeb65, 0xa6c08329, 0xccc18e37)
	SetNotificationSettings = stub(30)
	GetAccountNotificationSettings = stub(31).data(0x9b9f04e6)
	SetAccountNotificationSettings = stub(32)
	GetVibrationMasterVolume = stub(35).data(0xb35d949a)
	SetVibrationMasterVolume = stub(36)
	GetSettingsItemValueSize = stub(37).data(0x23c8a1ea)
	GetSettingsItemValue = stub(38).data(0x03dd3c5c)
	GetTvSettings = stub(39).data(0x23eaa0d1, 0x0f74fbcb, 0xb9642c50, 0x6c78f40e)
	SetTvSettings = stub(40)
	GetEdid = stub(41)
	SetEdid = stub(42)
	GetAudioOutputMode = stub(43).data(0x0c8fde03)
	SetAudioOutputMode = stub(44)
	IsForceMuteOnHeadphoneRemoved = stub(45).data(0x9d688dbc)
	SetForceMuteOnHeadphoneRemoved = stub(46)
	GetQuestFlag = stub(47).data(0x9dd8b1b4)
	SetQuestFlag = stub(48)
	GetDataDeletionSettings = stub(49).data(0xefd3a63a)
	SetDataDeletionSettings = stub(50)
	GetInitialSystemAppletProgramId = stub(51).data(0xd74bdc76)
	GetOverlayDispProgramId = stub(52).data(0x40650653)
	GetDeviceTimeZoneLocationName = stub(53).data(0xbf986e57, 0x3d1ac4a1, 0xcf193210, 0xfef2c8dd, 0x5ff0fce7)
	SetDeviceTimeZoneLocationName = stub(54)
	GetWirelessCertificationFileSize = stub(55).data(0xe91fb31d)
	GetWirelessCertificationFile = stub(56).data(0x6ba2e9fd)
	SetRegionCode = stub(57)
	GetNetworkSystemClockContext = stub(58).data(0xa4d08559, 0x56023467, 0x9bd75ad0, 0x2fe8d494)
	SetNetworkSystemClockContext = stub(59)
	IsUserSystemClockAutomaticCorrectionEnabled = stub(60).data(0x9f6a0c03)
	SetUserSystemClockAutomaticCorrectionEnabled = stub(61)
	GetDebugModeFlag = stub(62).data(0xaa50141a)
	GetPrimaryAlbumStorage = stub(63).data(0x181440e4)
	SetPrimaryAlbumStorage = stub(64)
	GetUsb30EnableFlag = stub(65).data(0x66d3fe7e)
	SetUsb30EnableFlag = stub(66)
	GetBatteryLot = stub(67).data(0x93f797b1, 0xf6769054, 0x4aa9b334)
	GetSerialNumber = stub(68).data(0xce64653a, 0x26bea3d1, 0x40ea1c6b)
	GetNfcEnableFlag = stub(69).data(0x29d532b9)
	SetNfcEnableFlag = stub(70)
	GetSleepSettings = stub(71).data(0x6fc026f2, 0xcd7312fe)
	SetSleepSettings = stub(72)
	GetWirelessLanEnableFlag = stub(73).data(0xf6cec90d)
	SetWirelessLanEnableFlag = stub(74)
	GetInitialLaunchSettings = stub(75).data(0x4213b98d, 0xe29ea5e8, 0x09c66332, 0x9d60e793)
	SetInitialLaunchSettings = stub(76)
	GetDeviceNickName = stub(77)
	SetDeviceNickName = stub(78)
	GetProductModel = stub(79).data(0xb860d3dd)
	GetLdnChannel = stub(80).data(0x536885a7)
	SetLdnChannel = stub(81)
	AcquireTelemetryDirtyFlagEventHandle = stub(82).copyHandle(0x31a5cba3)
	GetTelemetryDirtyFlags = stub(83).data(0x2813ec71, 0x2da601c1)
	GetPtmBatteryLot = stub(84).data(0x657cd6d6, 0x04b13f89, 0xfcb084e6)
	SetPtmBatteryLot = stub(85)
	GetPtmFuelGaugeParameter = stub(86).data(0x7af502b9, 0x11df7902, 0x30492f2b)
	SetPtmFuelGaugeParameter = stub(87)
	GetBluetoothEnableFlag = stub(88).data(0x567f38d9)
	SetBluetoothEnableFlag = stub(89)
	GetMiiAuthorId = stub(90).data(0x5b207dd8, 0x5fb7e179)
	SetShutdownRtcValue = stub(91)
	GetShutdownRtcValue = stub(92).data(0xd26715cf)
	AcquireFatalDirtyFlagEventHandle = stub(93).copyHandle(0x096a583d)
	GetFatalDirtyFlags = stub(94).data(0xf8ae1ae8, 0xf3f6239c)
	GetAutoUpdateEnableFlag = stub(95).data(0x2f1d7204)
	SetAutoUpdateEnableFlag = stub(96)
	GetNxControllerSettings = stub(97).data(0x8c8d47ac)
	SetNxControllerSettings = stub(98)
	GetBatteryPercentageFlag = stub(99).data(0xeecc2fed)
	SetBatteryPercentageFlag = stub(100)
	GetExternalRtcResetFlag = stub(101).data(0xfe0eac58)
	SetExternalRtcResetFlag = stub(102)
	GetUsbFullKeyEnableFlag = stub(103).data(0x3d86bf26)
	SetUsbFullKeyEnableFlag = stub(104)
	SetExternalSteadyClockInternalOffset = stub(105)
	GetExternalSteadyClockInternalOffset = stub(106).data(0xd9d5dd11)
	GetBacklightSettingsEx = stub(107).data(0x0f12a2a2, 0x236433b6, 0xd199cdee, 0x1cfd7800, 0xc1a0b3d3, 0x76c3ffd8)
	SetBacklightSettingsEx = stub(108)
	GetHeadphoneVolumeWarningCount = stub(109).data(0xd47a0174)
	SetHeadphoneVolumeWarningCount = stub(110)
	GetBluetoothAfhEnableFlag = stub(111).data(0xb5c732a8)
	SetBluetoothAfhEnableFlag = stub(112)
	GetBluetoothBoostEnableFlag = stub(113).data(0xd982251d)
	SetBluetoothBoostEnableFlag = stub(114)
	GetInRepairProcessEnableFlag = stub(115).data(0xc7bb4d6a)
	SetInRepairProcessEnableFlag = stub(116)
	GetHeadphoneVolumeUpdateFlag = stub(117).data(0xf9f36be8)
	SetHeadphoneVolumeUpdateFlag = stub(118)
	NeedsToUpdateHeadphoneVolume = stub(119).data(0x09c2a553)
	GetPushNotificationActivityModeOnSleep = stub(120).data(0x71a89f17)
	SetPushNotificationActivityModeOnSleep = stub(121)

class ISslConnection(IPCService): # nn::ssl::sf::ISslConnection
	SetSocketDescriptor = stub(0).data(0x8a6407e7)
	SetHostName = stub(1)
	SetVerifyOption = stub(2)
	SetIoMode = stub(3)
	GetSocketDescriptor = stub(4).data(0xef712ac3)
	GetHostName = stub(5).data(0x8d44cfff)
	GetVerifyOption = stub(6).data(0x6bc8ce19)
	GetIoMode = stub(7).data(0xdc01c44e)
	DoHandshake = stub(8)
	DoHandshakeGetServerCert = stub(9).data(0x5b5c5336)
	Read = stub(10).data(0xca13113f)
	Write = stub(11).data(0x21958581)
	Pending = stub(12).data(0x14f67a04)
	Peek = stub(13).data(0x7529741b)
	Poll = stub(14).data(0xfdd51c97)
	GetVerifyCertError = stub(15)
	GetNeededServerCertBufferSize = stub(16).data(0x9c79370f)
	SetSessionCacheMode = stub(17)
	GetSessionCacheMode = stub(18).data(0xa590a7ac)
	FlushSessionCache = stub(19)
	SetRenegotiationMode = stub(20)
	GetRenegotiationMode = stub(21).data(0xe8b40db7)
	SetOption = stub(22)
	GetOption = stub(23).data(0x604751d2)
	GetVerifyCertErrors = stub(24).data(0x1c11aebc)

class ISslContext(IPCService): # nn::ssl::sf::ISslContext
	SetOption = stub(0)
	GetOption = stub(1).data(0xb5b04088)
	CreateConnection = stub(2).moveHandle(ISslConnection)
	GetConnectionCount = stub(3).data(0xb916eb31)
	ImportServerPki = stub(4).data(0xd95fcb23)
	ImportClientPki = stub(5).data(0x530ba21b)
	RemoveServerPki = stub(6)
	RemoveClientPki = stub(7)
	RegisterInternalPki = stub(8).data(0xeaa85f87)
	AddPolicyOid = stub(9)
	ImportCrl = stub(10).data(0x7e54f1e5)
	RemoveCrl = stub(11)

@register('ssl')
class ISslService(IPCService): # nn::ssl::sf::ISslService
	CreateContext = stub(0).moveHandle(ISslContext)
	GetContextCount = stub(1).data(0x1f260d3d)
	GetCertificates = stub(2).data(0xfb542ae9)
	GetCertificateBufSize = stub(3).data(0xf4703e64)
	DebugIoctl = stub(4)
	SetInterfaceVersion = stub(5)

class ISteadyClock(IPCService): # nn::timesrv::detail::service::ISteadyClock
	GetCurrentTimePoint = stub(0).data(0xc7075d9b, 0x9b7297e4, 0xb4c5d101)
	GetTestOffset = stub(2).data(0x12431505)
	SetTestOffset = stub(3)
	GetRtcValue = stub(100).data(0x8676d6c2)
	IsRtcResetDetected = stub(101).data(0x61be9c06)
	GetSetupResutltValue = stub(102).data(0x57349d2b)
	GetInternalOffset = stub(200).data(0xb2ba1b70)
	SetInternalOffset = stub(201)

class ISystemClock(IPCService): # nn::timesrv::detail::service::ISystemClock
	GetCurrentTime = stub(0).data(0x337e8820)
	SetCurrentTime = stub(1)
	GetSystemClockContext = stub(2).data(0xcbad6bba, 0x37cde700, 0x575b8289, 0x0e433970)
	SetSystemClockContext = stub(3)

class ITimeZoneService(IPCService): # nn::timesrv::detail::service::ITimeZoneService
	GetDeviceLocationName = stub(0).data(0xca4469ed, 0xd607d95b, 0xdab871da, 0x825f3335, 0xeda98ee0)
	SetDeviceLocationName = stub(1)
	GetTotalLocationNameCount = stub(2).data(0x53e24390)
	LoadLocationNameList = stub(3).data(0x064f7739)
	LoadTimeZoneRule = stub(4)
	GetTimeZoneRuleVersion = stub(5).data(0x07a46565, 0xb6c39168)
	ToCalendarTime = stub(100).data(0x30bf8894, 0x0f19a4ed, 0x5d75b328, 0xc3b60ba0)
	ToCalendarTimeWithMyRule = stub(101).data(0x9fb2119c, 0xf0d9ed72, 0x6b5ad337, 0xedb23775)
	ToPosixTime = stub(201).data(0xe14c5ab3)
	ToPosixTimeWithMyRule = stub(202).data(0xb653e113)

class IManagerDisplayService(IPCService): # nn::visrv::sf::IManagerDisplayService
	GetDisplayResolution = stub(1102).data(0x8b81a64a, 0xfa6da2c9)
	CreateManagedLayer = stub(2010).data(0x7b2fc989)
	DestroyManagedLayer = stub(2011)
	CreateIndirectLayer = stub(2050).data(0x814996fb)
	DestroyIndirectLayer = stub(2051)
	CreateIndirectProducerEndPoint = stub(2052).data(0xc411ef3e)
	DestroyIndirectProducerEndPoint = stub(2053)
	CreateIndirectConsumerEndPoint = stub(2054).data(0x835c1d2e)
	DestroyIndirectConsumerEndPoint = stub(2055)
	AcquireLayerTexturePresentingEvent = stub(2300).copyHandle(0x24d098d8)
	ReleaseLayerTexturePresentingEvent = stub(2301)
	GetDisplayHotplugEvent = stub(2302).copyHandle(0xb8c48b4c)
	GetDisplayHotplugState = stub(2402).data(0xbdcc8c09)
	SetDisplayAlpha = stub(4201)
	SetDisplayLayerStack = stub(4203)
	SetDisplayPowerState = stub(4205)
	AddToLayerStack = stub(6000)
	RemoveFromLayerStack = stub(6001)
	SetLayerVisibility = stub(6002)
	SetContentVisibility = stub(7000)
	SetConductorLayer = stub(8000)
	SetIndirectProducerFlipOffset = stub(8100)

class ISystemDisplayService(IPCService): # nn::visrv::sf::ISystemDisplayService
	GetZOrderCountMin = stub(1200).data(0xba3fef4d)
	GetZOrderCountMax = stub(1202).data(0x70ac0e67)
	GetDisplayLogicalResolution = stub(1203).data(0x9cc1281d)
	SetDisplayMagnification = stub(1204)
	SetLayerPosition = stub(2201)
	SetLayerSize = stub(2203)
	GetLayerZ = stub(2204).data(0xc92b0392)
	SetLayerZ = stub(2205)
	SetLayerVisibility = stub(2207)
	SetLayerAlpha = stub(2209)
	CreateStrayLayer = stub(2312).data(0x67121fe4, 0x9cc01f95)
	OpenIndirectLayer = stub(2400).data(0xcdb6ee74)
	CloseIndirectLayer = stub(2401)
	FlipIndirectLayer = stub(2402)
	ListDisplayModes = stub(3000).data(0xb9948dbd)
	ListDisplayRgbRanges = stub(3001).data(0x6b4601ec)
	ListDisplayContentTypes = stub(3002).data(0x9e346ad3)
	GetDisplayMode = stub(3200).data(0x1ca1eef3, 0x75a960fe)
	SetDisplayMode = stub(3201)
	GetDisplayUnderscan = stub(3202).data(0x0a4809ba)
	SetDisplayUnderscan = stub(3203)
	GetDisplayContentType = stub(3204).data(0xcba657e4)
	SetDisplayContentType = stub(3205)
	GetDisplayRgbRange = stub(3206).data(0xc3f152e8)
	SetDisplayRgbRange = stub(3207)
	GetDisplayCmuMode = stub(3208).data(0xceea5dce)
	SetDisplayCmuMode = stub(3209)
	GetDisplayContrastRatio = stub(3210).data(0x11afaecd)
	SetDisplayContrastRatio = stub(3211)
	GetDisplayGamma = stub(3214).data(0x52374f49)
	SetDisplayGamma = stub(3215)
	GetDisplayCmuLuma = stub(3216).data(0xb1b13164)
	SetDisplayCmuLuma = stub(3217)

class IHOSBinderDriver(IPCService): # nns::hosbinder::IHOSBinderDriver
	TransactParcel = stub(0)
	AdjustRefcount = stub(1)
	GetNativeHandle = stub(2).copyHandle(0xc0bbee30)
	TransactParcelAuto = stub(3)

@register('acc:aa')
class IBaasAccessTokenAccessor(IPCService): # nn::account::IBaasAccessTokenAccessor
	EnsureCacheAsync = stub(0).moveHandle(IAsyncContext)
	LoadCache = stub(1).data(0x84c89f85)
	GetDeviceAccountId = stub(2).data(0x1ec01bee)
	RegisterNotificationTokenAsync = stub(50).moveHandle(IAsyncContext)
	UnregisterNotificationTokenAsync = stub(51).moveHandle(IAsyncContext)

class IAdministrator(IPCService): # nn::account::baas::IAdministrator
	CheckAvailability = stub(0)
	GetAccountId = stub(1).data(0x430cd8e0)
	EnsureIdTokenCacheAsync = stub(2).moveHandle(IAsyncContext)
	LoadIdTokenCache = stub(3).data(0xa98cee89)
	SetSystemProgramIdentification = stub(100)
	GetNintendoAccountId = stub(120).data(0xc247ecad)
	GetNintendoAccountUserResourceCache = stub(130).data(0x6a6ab511)
	RefreshNintendoAccountUserResourceCacheAsync = stub(131).moveHandle(IAsyncContext)
	RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed = stub(132).data(0xd7e812f0).moveHandle(IAsyncContext)
	CreateAuthorizationRequest = stub(150).moveHandle(IAuthorizationRequest)
	IsRegistered = stub(200).data(0x10dee865)
	RegisterAsync = stub(201).moveHandle(IAsyncContext)
	UnregisterAsync = stub(202).moveHandle(IAsyncContext)
	DeleteRegistrationInfoLocally = stub(203)
	SynchronizeProfileAsync = stub(220).moveHandle(IAsyncContext)
	UploadProfileAsync = stub(221).moveHandle(IAsyncContext)
	SynchronizeProfileAsyncIfSecondsElapsed = stub(222).data(0xa34bea85).moveHandle(IAsyncContext)
	IsLinkedWithNintendoAccount = stub(250).data(0x64fcd61d)
	CreateProcedureToLinkWithNintendoAccount = stub(251).moveHandle(IOAuthProcedureForNintendoAccountLinkage)
	ResumeProcedureToLinkWithNintendoAccount = stub(252).moveHandle(IOAuthProcedureForNintendoAccountLinkage)
	CreateProcedureToUpdateLinkageStateOfNintendoAccount = stub(255).moveHandle(IOAuthProcedure)
	ResumeProcedureToUpdateLinkageStateOfNintendoAccount = stub(256).moveHandle(IOAuthProcedure)
	CreateProcedureToLinkNnidWithNintendoAccount = stub(260).moveHandle(IOAuthProcedure)
	ResumeProcedureToLinkNnidWithNintendoAccount = stub(261).moveHandle(IOAuthProcedure)
	ProxyProcedureToAcquireApplicationAuthorizationForNintendoAccount = stub(280).moveHandle(IOAuthProcedure)
	DebugUnlinkNintendoAccountAsync = stub(997).moveHandle(IAsyncContext)
	DebugSetAvailabilityErrorDetail = stub(998)

class IFloatingRegistrationRequest(IPCService): # nn::account::baas::IFloatingRegistrationRequest
	GetSessionId = stub(0).data(0xb5ce776f, 0xbca79088)
	GetAccountId = stub(12).data(0x39be6d95)
	GetLinkedNintendoAccountId = stub(13).data(0x88eb5ca5)
	GetNickname = stub(14)
	GetProfileImage = stub(15).data(0x27ebc270)
	LoadIdTokenCache = stub(21).data(0x08e51ece)
	RegisterAsync = stub(100).data(0x73afe66c, 0x3da8748f).moveHandle(IAsyncContext)
	RegisterWithUidAsync = stub(101).moveHandle(IAsyncContext)
	SetSystemProgramIdentification = stub(110)
	EnsureIdTokenCacheAsync = stub(111).moveHandle(IAsyncContext)

class IManagerForApplication(IPCService): # nn::account::baas::IManagerForApplication
	CheckAvailability = stub(0)
	GetAccountId = stub(1).data(0xaadef6a5)
	EnsureIdTokenCacheAsync = stub(2).moveHandle(IAsyncContext)
	LoadIdTokenCache = stub(3).data(0x3f1d5b7d)
	GetNintendoAccountUserResourceCacheForApplication = stub(130).data(0x8ccfde59)
	CreateAuthorizationRequest = stub(150).moveHandle(IAuthorizationRequest)

class IManagerForSystemService(IPCService): # nn::account::baas::IManagerForSystemService
	CheckAvailability = stub(0)
	GetAccountId = stub(1).data(0xe3db1cdb)
	EnsureIdTokenCacheAsync = stub(2).moveHandle(IAsyncContext)
	LoadIdTokenCache = stub(3).data(0x7198b222)
	SetSystemProgramIdentification = stub(100)
	GetNintendoAccountId = stub(120).data(0xa00e4592)
	GetNintendoAccountUserResourceCache = stub(130).data(0xb09acdee)
	RefreshNintendoAccountUserResourceCacheAsync = stub(131).moveHandle(IAsyncContext)
	RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed = stub(132).data(0x6a508212).moveHandle(IAsyncContext)
	CreateAuthorizationRequest = stub(150).moveHandle(IAuthorizationRequest)

class IStorage(IPCService): # nn::am::service::IStorage
	Open = stub(0).moveHandle(IStorageAccessor)
	OpenTransferStorage = stub(1).moveHandle(ITransferStorageAccessor)

@register('apm')
class IManager(IPCService): # nn::apm::IManager
	OpenSession = stub(0).moveHandle(ApmISession)
	GetPerformanceMode = stub(1).data(0x1dacfffa)

@register('apm:p')
class IManagerPrivileged(IPCService): # nn::apm::IManagerPrivileged
	OpenSession = stub(0).moveHandle(ApmISession)

class IBcatService(IPCService): # nn::bcat::detail::ipc::IBcatService
	RequestSyncDeliveryCache = stub(10100).moveHandle(IDeliveryCacheProgressService)
	RequestSyncDeliveryCacheWithApplicationId = stub(20100).moveHandle(IDeliveryCacheProgressService)
	SetPassphrase = stub(30100)
	RegisterBackgroundDeliveryTask = stub(30200)
	UnregisterBackgroundDeliveryTask = stub(30201)
	BlockDeliveryTask = stub(30202)
	UnblockDeliveryTask = stub(30203)
	EnumerateBackgroundDeliveryTask = stub(90100).data(0xbe705c45)
	GetDeliveryList = stub(90200).data(0xb18aa08b)
	ClearDeliveryCacheStorage = stub(90201)
	GetPushNotificationLog = stub(90300).data(0x571c0dd3)

@register('bcat:a')
@register('bcat:m')
@register('bcat:u')
@register('bcat:s')
class BcatDetailIpcIServiceCreator(IPCService): # nn::bcat::detail::ipc::IServiceCreator
	CreateBcatService = stub(0).moveHandle(IBcatService)
	CreateDeliveryCacheStorageService = stub(1).moveHandle(IDeliveryCacheStorageService)
	CreateDeliveryCacheStorageServiceWithApplicationId = stub(2).moveHandle(IDeliveryCacheStorageService)

class IGeneralService(IPCService): # nn::nifm::detail::IGeneralService
	GetClientId = stub(1)
	CreateScanRequest = stub(2).moveHandle(IScanRequest)
	CreateRequest = stub(4).moveHandle(DetailIRequest)
	GetCurrentNetworkProfile = stub(5)
	EnumerateNetworkInterfaces = stub(6).data(0x7a5fb35d)
	EnumerateNetworkProfiles = stub(7).data(0xb95b29ac)
	GetNetworkProfile = stub(8)
	SetNetworkProfile = stub(9).data(0xa702e4ff, 0x14e50213)
	RemoveNetworkProfile = stub(10)
	GetScanData = stub(11).data(0x1cff7a16)
	GetCurrentIpAddress = stub(12).data(0xa105d9ee)
	GetCurrentAccessPoint = stub(13)
	CreateTemporaryNetworkProfile = stub(14).data(0x70ca5b32, 0x93215ff4).moveHandle(INetworkProfile)
	GetCurrentIpConfigInfo = stub(15).data(0xec191d9b, 0xce5a5086, 0x6086bca2)
	SetWirelessCommunicationEnabled = stub(16)
	IsWirelessCommunicationEnabled = stub(17).data(0x2c9823e5)
	GetInternetConnectionStatus = stub(18).data(0xa68afc4b)
	SetEthernetCommunicationEnabled = stub(19)
	IsEthernetCommunicationEnabled = stub(20).data(0x9e26208a)
	IsAnyInternetRequestAccepted = stub(21).data(0x38e941c0)
	IsAnyForegroundRequestAccepted = stub(22).data(0x0de75821)
	PutToSleep = stub(23)
	WakeUp = stub(24)
	GetSsidListVersion = stub(25).data(0x10c6b6e6, 0xff4c5017)
	SetExclusiveClient = stub(26)
	GetDefaultIpSetting = stub(27)
	SetDefaultIpSetting = stub(28)
	SetWirelessCommunicationEnabledForTest = stub(29)
	SetEthernetCommunicationEnabledForTest = stub(30)
	GetTelemetorySystemEventReadableHandle = stub(31).copyHandle(0xec5cd411)
	GetTelemetryInfo = stub(32)
	ConfirmSystemAvailability = stub(33)

@register('nifm:a')
@register('nifm:s')
@register('nifm:u')
class NifmDetailIStaticService(IPCService): # nn::nifm::detail::IStaticService
	CreateGeneralServiceOld = stub(4).moveHandle(IGeneralService)
	CreateGeneralService = stub(5).moveHandle(IGeneralService)

@register('set:fd')
class IFirmwareDebugSettingsServer(IPCService): # nn::settings::IFirmwareDebugSettingsServer
	SetSettingsItemValue = stub(2)
	ResetSettingsItemValue = stub(3)
	CreateSettingsItemKeyIterator = stub(4).moveHandle(ISettingsItemKeyIterator)

@register('time:s')
@register('time:u')
@register('time:r')
@register('time:a')
class ServiceIStaticService(IPCService): # nn::timesrv::detail::service::IStaticService
	GetStandardUserSystemClock = stub(0).moveHandle(ISystemClock)
	GetStandardNetworkSystemClock = stub(1).moveHandle(ISystemClock)
	GetStandardSteadyClock = stub(2).moveHandle(ISteadyClock)
	GetTimeZoneService = stub(3).moveHandle(ITimeZoneService)
	GetStandardLocalSystemClock = stub(4).moveHandle(ISystemClock)
	IsStandardUserSystemClockAutomaticCorrectionEnabled = stub(100).data(0xdad25e0b)
	SetStandardUserSystemClockAutomaticCorrectionEnabled = stub(101)
	IsStandardNetworkSystemClockAccuracySufficient = stub(200).data(0x48ed1e11)

class IApplicationDisplayService(IPCService): # nn::visrv::sf::IApplicationDisplayService
	GetRelayService = stub(100).moveHandle(IHOSBinderDriver)
	GetSystemDisplayService = stub(101).moveHandle(ISystemDisplayService)
	GetManagerDisplayService = stub(102).moveHandle(IManagerDisplayService)
	GetIndirectDisplayTransactionService = stub(103).moveHandle(IHOSBinderDriver)
	ListDisplays = stub(1000).data(0xfa844e7b)
	OpenDisplay = stub(1010).data(0x4f3e8d5c)
	OpenDefaultDisplay = stub(1011).data(0x6a2adc98)
	CloseDisplay = stub(1020)
	SetDisplayEnabled = stub(1101)
	GetDisplayResolution = stub(1102).data(0xd8fd244d, 0x6623ca55)
	OpenLayer = stub(2020).data(0xec069d45)
	CloseLayer = stub(2021)
	CreateStrayLayer = stub(2030).data(0xd0d284d3, 0xb680f2e7)
	DestroyStrayLayer = stub(2031)
	SetLayerScalingMode = stub(2101)
	GetIndirectLayerImageMap = stub(2450).data(0xe5f6566c, 0xdaf96106)
	GetIndirectLayerImageCropMap = stub(2451).data(0x9b814adf, 0xbfa73976)
	GetIndirectLayerImageRequiredMemoryInfo = stub(2460).data(0x5afb2503, 0x11c24519)
	GetDisplayVsyncEvent = stub(5202).copyHandle(0x647398e6)
	GetDisplayVsyncEventForDebug = stub(5203).copyHandle(0xbd2c1c53)

@register('vi:u')
class IApplicationRootService(IPCService): # nn::visrv::sf::IApplicationRootService
	GetDisplayService = stub(0).moveHandle(IApplicationDisplayService)

@register('vi:m')
class IManagerRootService(IPCService): # nn::visrv::sf::IManagerRootService
	GetDisplayService = stub(2).moveHandle(IApplicationDisplayService)
	GetDisplayServiceWithProxyNameExchange = stub(3).moveHandle(IApplicationDisplayService)

@register('vi:s')
class ISystemRootService(IPCService): # nn::visrv::sf::ISystemRootService
	GetDisplayService = stub(1).moveHandle(IApplicationDisplayService)
	GetDisplayServiceWithProxyNameExchange = stub(3).moveHandle(IApplicationDisplayService)

@register('acc:su')
class IAccountServiceForAdministrator(IPCService): # nn::account::IAccountServiceForAdministrator
	GetUserCount = stub(0).data(0xb9e86480)
	GetUserExistence = stub(1).data(0x2dc1ae26)
	ListAllUsers = stub(2)
	ListOpenUsers = stub(3)
	GetLastOpenedUser = stub(4).data(0x9c832b67, 0xd3568ec1)
	GetProfile = stub(5).moveHandle(IProfile)
	GetProfileDigest = stub(6).data(0xf9739ab6, 0xb3f12de9)
	IsUserRegistrationRequestPermitted = stub(50).data(0x4a9df4b1)
	TrySelectUserWithoutInteraction = stub(51).data(0x8cbffca1, 0x4447d855)
	GetUserRegistrationNotifier = stub(100).moveHandle(INotifier)
	GetUserStateChangeNotifier = stub(101).moveHandle(INotifier)
	GetBaasAccountManagerForSystemService = stub(102).moveHandle(IManagerForSystemService)
	GetBaasUserAvailabilityChangeNotifier = stub(103).moveHandle(INotifier)
	GetProfileUpdateNotifier = stub(104).moveHandle(INotifier)
	StoreSaveDataThumbnail = stub(110)
	ClearSaveDataThumbnail = stub(111)
	LoadSaveDataThumbnail = stub(112).data(0x067f68e6)
	GetUserLastOpenedApplication = stub(190).data(0x8ed09904, 0xb28024ae)
	BeginUserRegistration = stub(200).data(0xa40c35b7, 0x90db5df5)
	CompleteUserRegistration = stub(201)
	CancelUserRegistration = stub(202)
	DeleteUser = stub(203)
	SetUserPosition = stub(204)
	GetProfileEditor = stub(205).moveHandle(IProfileEditor)
	CompleteUserRegistrationForcibly = stub(206)
	CreateFloatingRegistrationRequest = stub(210).moveHandle(IFloatingRegistrationRequest)
	AuthenticateServiceAsync = stub(230).moveHandle(IAsyncContext)
	GetBaasAccountAdministrator = stub(250).moveHandle(IAdministrator)
	ProxyProcedureForGuestLoginWithNintendoAccount = stub(290).moveHandle(IOAuthProcedureForExternalNsa)
	ProxyProcedureForFloatingRegistrationWithNintendoAccount = stub(291).moveHandle(IOAuthProcedureForExternalNsa)
	SuspendBackgroundDaemon = stub(299).moveHandle(ISessionObject)
	DebugInvalidateTokenCacheForUser = stub(997)
	DebugSetUserStateClose = stub(998)
	DebugSetUserStateOpen = stub(999)

@register('acc:u1')
class IAccountServiceForApplication(IPCService): # nn::account::IAccountServiceForApplication
	GetUserCount = stub(0).data(0xb0054166)
	GetUserExistence = stub(1).data(0x26aa49de)
	ListAllUsers = stub(2)
	ListOpenUsers = stub(3)
	GetLastOpenedUser = stub(4).data(0x832ac6e2, 0x1f1db1c6)
	GetProfile = stub(5).moveHandle(IProfile)
	GetProfileDigest = stub(6).data(0x67fe0524, 0x01eb7496)
	IsUserRegistrationRequestPermitted = stub(50).data(0x845e21f9)
	TrySelectUserWithoutInteraction = stub(51).data(0x944da1d6, 0xfc9b19a6)
	InitializeApplicationInfo = stub(100)
	GetBaasAccountManagerForApplication = stub(101).moveHandle(IManagerForApplication)
	AuthenticateApplicationAsync = stub(102).moveHandle(IAsyncContext)
	StoreSaveDataThumbnail = stub(110)
	ClearSaveDataThumbnail = stub(111)
	CreateGuestLoginRequest = stub(120).moveHandle(IGuestLoginRequest)

@register('acc:u0')
class IAccountServiceForSystemService(IPCService): # nn::account::IAccountServiceForSystemService
	GetUserCount = stub(0).data(0x1c2bcc18)
	GetUserExistence = stub(1).data(0x11e4db10)
	ListAllUsers = stub(2)
	ListOpenUsers = stub(3)
	GetLastOpenedUser = stub(4).data(0xe3717e4f, 0x796f2086)
	GetProfile = stub(5).moveHandle(IProfile)
	GetProfileDigest = stub(6).data(0x989dd04f, 0x46cbf2e8)
	IsUserRegistrationRequestPermitted = stub(50).data(0xe2886c27)
	TrySelectUserWithoutInteraction = stub(51).data(0x4119fb8b, 0x6abba92e)
	GetUserRegistrationNotifier = stub(100).moveHandle(INotifier)
	GetUserStateChangeNotifier = stub(101).moveHandle(INotifier)
	GetBaasAccountManagerForSystemService = stub(102).moveHandle(IManagerForSystemService)
	GetBaasUserAvailabilityChangeNotifier = stub(103).moveHandle(INotifier)
	GetProfileUpdateNotifier = stub(104).moveHandle(INotifier)
	StoreSaveDataThumbnail = stub(110)
	ClearSaveDataThumbnail = stub(111)
	LoadSaveDataThumbnail = stub(112).data(0x883ce5f7)
	GetUserLastOpenedApplication = stub(190).data(0x0727a3e4, 0xae07fdba)
	DebugInvalidateTokenCacheForUser = stub(997)
	DebugSetUserStateClose = stub(998)
	DebugSetUserStateOpen = stub(999)

class IApplicationAccessor(IPCService): # nn::am::service::IApplicationAccessor
	GetAppletStateChangedEvent = stub(0).copyHandle(0x577339e9)
	IsCompleted = stub(1).data(0xe8e1355a)
	Start = stub(10)
	RequestExit = stub(20)
	Terminate = stub(25)
	GetResult = stub(30)
	RequestForApplicationToGetForeground = stub(101)
	TerminateAllLibraryApplets = stub(110)
	AreAnyLibraryAppletsLeft = stub(111).data(0x012d9981)
	GetCurrentLibraryApplet = stub(112).moveHandle(IAppletAccessor)
	GetApplicationId = stub(120).data(0x7de0a7ff)
	PushLaunchParameter = stub(121).moveHandle(IStorage, 'nn::am::service::IApplicationAccessor::PushLaunchParameter')
	GetApplicationControlProperty = stub(122)
	GetApplicationLaunchProperty = stub(123)

class IApplicationCreator(IPCService): # nn::am::service::IApplicationCreator
	CreateApplication = stub(0).moveHandle(IApplicationAccessor)
	PopLaunchRequestedApplication = stub(1).moveHandle(IApplicationAccessor)
	CreateSystemApplication = stub(10).moveHandle(IApplicationAccessor)
	PopFloatingApplicationForDevelopment = stub(100).moveHandle(IApplicationAccessor)

class IApplicationFunctions(IPCService): # nn::am::service::IApplicationFunctions
	PopLaunchParameter = stub(1).moveHandle(IStorage, 'nn::am::service::IApplicationFunctions::PopLaunchParameter')
	CreateApplicationAndPushAndRequestToStart = stub(10).moveHandle(IStorage, 'nn::am::service::IApplicationFunctions::CreateApplicationAndPushAndRequestToStart')
	CreateApplicationAndPushAndRequestToStartForQuest = stub(11).moveHandle(IStorage, 'nn::am::service::IApplicationFunctions::CreateApplicationAndPushAndRequestToStartForQuest')
	EnsureSaveData = stub(20).data(0xdaa5ad79)
	GetDesiredLanguage = stub(21).data(0xe5cf47bf)
	SetTerminateResult = stub(22)
	GetDisplayVersion = stub(23).data(0xc1fd7834, 0xf986384a)
	GetLaunchStorageInfoForDebug = stub(24).data(0x95f73684)
	ExtendSaveData = stub(25).data(0x65628569)
	GetSaveDataSize = stub(26).data(0x0528845e, 0x086b195e)
	BeginBlockingHomeButtonShortAndLongPressed = stub(30)
	EndBlockingHomeButtonShortAndLongPressed = stub(31)
	BeginBlockingHomeButton = stub(32)
	EndBlockingHomeButton = stub(33)
	NotifyRunning = stub(40).data(0x31230994)
	GetPseudoDeviceId = stub(50).data(0xaa556d32, 0x7e0f92ff)
	SetMediaPlaybackStateForApplication = stub(60)
	IsGamePlayRecordingSupported = stub(65).data(0xd00c0036)
	InitializeGamePlayRecording = stub(66)
	SetGamePlayRecordingState = stub(67)
	RequestToShutdown = stub(70)
	RequestToReboot = stub(71)

class ICommonStateGetter(IPCService): # nn::am::service::ICommonStateGetter
	GetEventHandle = stub(0).copyHandle(0x21dd8af4)
	ReceiveMessage = stub(1).data(0xadb192d6)
	GetThisAppletKind = stub(2).data(0xc6c3bcde)
	AllowToEnterSleep = stub(3)
	DisallowToEnterSleep = stub(4)
	GetOperationMode = stub(5).data(0x821f802a)
	GetPerformanceMode = stub(6).data(0xe168d8bb)
	GetCradleStatus = stub(7).data(0xed4a65d0)
	GetBootMode = stub(8).data(0x6902326f)
	GetCurrentFocusState = stub(9).data(0xdac73718)
	RequestToAcquireSleepLock = stub(10)
	ReleaseSleepLock = stub(11)
	ReleaseSleepLockTransiently = stub(12)
	GetAcquiredSleepLockEvent = stub(13).copyHandle(0xdfeb542c)
	PushToGeneralChannel = stub(20).moveHandle(IStorage, 'nn::am::service::ICommonStateGetter::PushToGeneralChannel')
	GetHomeButtonReaderLockAccessor = stub(30).moveHandle(ILockAccessor)
	GetReaderLockAccessorEx = stub(31).moveHandle(ILockAccessor)
	GetCradleFwVersion = stub(40).data(0x826849e6, 0x39d55553)
	IsVrModeEnabled = stub(50).data(0xef8cdc22)
	SetVrModeEnabled = stub(51)
	IsInControllerFirmwareUpdateSection = stub(55).data(0xc4589714)
	GetDefaultDisplayResolution = stub(60).data(0x69ffa2f1)
	GetDefaultDisplayResolutionChangeEvent = stub(61).copyHandle(0x8cd7c87b)

class IDebugFunctions(IPCService): # nn::am::service::IDebugFunctions
	NotifyMessageToHomeMenuForDebug = stub(0)
	OpenMainApplication = stub(1).moveHandle(IApplicationAccessor)
	EmulateButtonEvent = stub(10)
	InvalidateTransitionLayer = stub(20)

class IHomeMenuFunctions(IPCService): # nn::am::service::IHomeMenuFunctions
	RequestToGetForeground = stub(10)
	LockForeground = stub(11)
	UnlockForeground = stub(12)
	PopFromGeneralChannel = stub(20).moveHandle(IStorage, 'nn::am::service::IHomeMenuFunctions::PopFromGeneralChannel')
	GetPopFromGeneralChannelEvent = stub(21).copyHandle(0x897bde51)
	GetHomeButtonWriterLockAccessor = stub(30).moveHandle(ILockAccessor)
	GetWriterLockAccessorEx = stub(31).moveHandle(ILockAccessor)

class ILibraryAppletAccessor(IPCService): # nn::am::service::ILibraryAppletAccessor
	GetAppletStateChangedEvent = stub(0).copyHandle(0xa54f6d63)
	IsCompleted = stub(1).data(0x96e2aefb)
	Start = stub(10)
	RequestExit = stub(20)
	Terminate = stub(25)
	GetResult = stub(30)
	SetOutOfFocusApplicationSuspendingEnabled = stub(50)
	PushInData = stub(100).moveHandle(IStorage, 'nn::am::service::ILibraryAppletAccessor::PushInData')
	PopOutData = stub(101).moveHandle(IStorage, 'nn::am::service::ILibraryAppletAccessor::PopOutData')
	PushExtraStorage = stub(102).moveHandle(IStorage, 'nn::am::service::ILibraryAppletAccessor::PushExtraStorage')
	PushInteractiveInData = stub(103).moveHandle(IStorage, 'nn::am::service::ILibraryAppletAccessor::PushInteractiveInData')
	PopInteractiveOutData = stub(104).moveHandle(IStorage, 'nn::am::service::ILibraryAppletAccessor::PopInteractiveOutData')
	GetPopOutDataEvent = stub(105).copyHandle(0x9f4a89e7)
	GetPopInteractiveOutDataEvent = stub(106).copyHandle(0x94ba5a47)
	NeedsToExitProcess = stub(110).data(0x663a9984)
	GetLibraryAppletInfo = stub(120).data(0x23b43742)
	RequestForAppletToGetForeground = stub(150)
	GetIndirectLayerConsumerHandle = stub(160).data(0xe02dfdae)

class ILibraryAppletCreator(IPCService): # nn::am::service::ILibraryAppletCreator
	CreateLibraryApplet = stub(0).moveHandle(ILibraryAppletAccessor)
	TerminateAllLibraryApplets = stub(1)
	AreAnyLibraryAppletsLeft = stub(2).data(0x57d770fc)
	CreateStorage = stub(10).moveHandle(IStorage, 'nn::am::service::ILibraryAppletCreator::CreateStorage')
	CreateTransferMemoryStorage = stub(11).moveHandle(IStorage, 'nn::am::service::ILibraryAppletCreator::CreateTransferMemoryStorage')
	CreateHandleStorage = stub(12).moveHandle(IStorage, 'nn::am::service::ILibraryAppletCreator::CreateHandleStorage')

class ILibraryAppletSelfAccessor(IPCService): # nn::am::service::ILibraryAppletSelfAccessor
	PopInData = stub(0).moveHandle(IStorage, 'nn::am::service::ILibraryAppletSelfAccessor::PopInData')
	PushOutData = stub(1).moveHandle(IStorage, 'nn::am::service::ILibraryAppletSelfAccessor::PushOutData')
	PopInteractiveInData = stub(2).moveHandle(IStorage, 'nn::am::service::ILibraryAppletSelfAccessor::PopInteractiveInData')
	PushInteractiveOutData = stub(3).moveHandle(IStorage, 'nn::am::service::ILibraryAppletSelfAccessor::PushInteractiveOutData')
	GetPopInDataEvent = stub(5).copyHandle(0x19208a71)
	GetPopInteractiveInDataEvent = stub(6).copyHandle(0x5c5007b6)
	ExitProcessAndReturn = stub(10)
	GetLibraryAppletInfo = stub(11).data(0x5ba7eba8)
	GetMainAppletIdentityInfo = stub(12).data(0x56f512c7, 0x8b8cc8a1)
	CanUseApplicationCore = stub(13).data(0x5dd3d45b)
	GetCallerAppletIdentityInfo = stub(14).data(0x0f933257, 0x5a8daae5)
	GetMainAppletApplicationControlProperty = stub(15)
	GetMainAppletStorageId = stub(16).data(0x62d46d50)
	GetCallerAppletIdentityInfoStack = stub(17).data(0x743b2da2)
	PopExtraStorage = stub(20).moveHandle(IStorage, 'nn::am::service::ILibraryAppletSelfAccessor::PopExtraStorage')
	GetPopExtraStorageEvent = stub(25).copyHandle(0xc47390d1)
	UnpopInData = stub(30).moveHandle(IStorage, 'nn::am::service::ILibraryAppletSelfAccessor::UnpopInData')
	UnpopExtraStorage = stub(31).moveHandle(IStorage, 'nn::am::service::ILibraryAppletSelfAccessor::UnpopExtraStorage')
	GetIndirectLayerProducerHandle = stub(40).data(0xd224ab38)
	ReportVisibleError = stub(50)

class IProcessWindingController(IPCService): # nn::am::service::IProcessWindingController
	GetLaunchReason = stub(0).data(0x411fac3f)
	OpenCallingLibraryApplet = stub(11).moveHandle(ILibraryAppletAccessor)
	PushContext = stub(21).moveHandle(IStorage, 'nn::am::service::IProcessWindingController::PushContext')
	PopContext = stub(22).moveHandle(IStorage, 'nn::am::service::IProcessWindingController::PopContext')
	CancelWindingReservation = stub(23)
	WindAndDoReserved = stub(30)
	ReserveToStartAndWaitAndUnwindThis = stub(40).moveHandle(ILibraryAppletAccessor)

class ISystemAppletProxy(IPCService): # nn::am::service::ISystemAppletProxy
	GetCommonStateGetter = stub(0).moveHandle(ICommonStateGetter)
	GetSelfController = stub(1).moveHandle(ISelfController)
	GetWindowController = stub(2).moveHandle(IWindowController)
	GetAudioController = stub(3).moveHandle(IAudioController)
	GetDisplayController = stub(4).moveHandle(IDisplayController)
	GetProcessWindingController = stub(10).moveHandle(IProcessWindingController)
	GetLibraryAppletCreator = stub(11).moveHandle(ILibraryAppletCreator)
	GetHomeMenuFunctions = stub(20).moveHandle(IHomeMenuFunctions)
	GetGlobalStateController = stub(21).moveHandle(IGlobalStateController)
	GetApplicationCreator = stub(22).moveHandle(IApplicationCreator)
	GetDebugFunctions = stub(1000).moveHandle(IDebugFunctions)

class IApplicationProxy(IPCService): # nn::am::service::IApplicationProxy
	GetCommonStateGetter = stub(0).moveHandle(ICommonStateGetter)
	GetSelfController = stub(1).moveHandle(ISelfController)
	GetWindowController = stub(2).moveHandle(IWindowController)
	GetAudioController = stub(3).moveHandle(IAudioController)
	GetDisplayController = stub(4).moveHandle(IDisplayController)
	GetProcessWindingController = stub(10).moveHandle(IProcessWindingController)
	GetLibraryAppletCreator = stub(11).moveHandle(ILibraryAppletCreator)
	GetApplicationFunctions = stub(20).moveHandle(IApplicationFunctions)
	GetDebugFunctions = stub(1000).moveHandle(IDebugFunctions)

@register('appletOE')
class IApplicationProxyService(IPCService): # nn::am::service::IApplicationProxyService
	OpenApplicationProxy = stub(0).moveHandle(IApplicationProxy)

class ILibraryAppletProxy(IPCService): # nn::am::service::ILibraryAppletProxy
	GetCommonStateGetter = stub(0).moveHandle(ICommonStateGetter)
	GetSelfController = stub(1).moveHandle(ISelfController)
	GetWindowController = stub(2).moveHandle(IWindowController)
	GetAudioController = stub(3).moveHandle(IAudioController)
	GetDisplayController = stub(4).moveHandle(IDisplayController)
	GetProcessWindingController = stub(10).moveHandle(IProcessWindingController)
	GetLibraryAppletCreator = stub(11).moveHandle(ILibraryAppletCreator)
	OpenLibraryAppletSelfAccessor = stub(20).moveHandle(ILibraryAppletSelfAccessor)
	GetDebugFunctions = stub(1000).moveHandle(IDebugFunctions)

class IOverlayAppletProxy(IPCService): # nn::am::service::IOverlayAppletProxy
	GetCommonStateGetter = stub(0).moveHandle(ICommonStateGetter)
	GetSelfController = stub(1).moveHandle(ISelfController)
	GetWindowController = stub(2).moveHandle(IWindowController)
	GetAudioController = stub(3).moveHandle(IAudioController)
	GetDisplayController = stub(4).moveHandle(IDisplayController)
	GetProcessWindingController = stub(10).moveHandle(IProcessWindingController)
	GetLibraryAppletCreator = stub(11).moveHandle(ILibraryAppletCreator)
	GetOverlayFunctions = stub(20).moveHandle(IOverlayFunctions)
	GetDebugFunctions = stub(1000).moveHandle(IDebugFunctions)

@register('appletAE')
class IAllSystemAppletProxiesService(IPCService): # nn::am::service::IAllSystemAppletProxiesService
	OpenSystemAppletProxy = stub(100).moveHandle(ISystemAppletProxy)
	OpenLibraryAppletProxyOld = stub(200).moveHandle(ILibraryAppletProxy)
	OpenLibraryAppletProxy = stub(201).moveHandle(ILibraryAppletProxy)
	OpenOverlayAppletProxy = stub(300).moveHandle(IOverlayAppletProxy)
	OpenSystemApplicationProxy = stub(350).moveHandle(IApplicationProxy)
	CreateSelfLibraryAppletCreatorForDevelop = stub(400).moveHandle(ILibraryAppletCreator)

